# -*- coding: utf-8 -*-
"""test model od clinical data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VOSHM3kUrv5I4fe5XHdCZcYEfld68gAe
"""

import os
import pydicom as dicom
import numpy as np
import pandas as pd
from tqdm import tqdm
from tensorflow.keras.preprocessing.image import ImageDataGenerator

import shutil
from tensorflow.keras import callbacks
from tensorflow.keras import models
from tensorflow.keras import layers
from tensorflow.keras import optimizers
from tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization, AveragePooling2D, GlobalAveragePooling2D,Flatten
from tensorflow.keras.models import Model
import tensorflow as tf
from sklearn.model_selection import train_test_split
import cv2
import matplotlib.pyplot as plt
import json
import pylibjpeg 
import gdcm
from medpy.io import load

tf.compat.v1.disable_eager_execution()
model_path = "delete_smaller_20000_pixels_last.h5"

########

import skimage
from skimage.morphology import ball, disk, dilation, binary_erosion, remove_small_objects, erosion, closing, reconstruction, binary_closing
from skimage.measure import label,regionprops, perimeter
from skimage.filters import roberts, sobel
from skimage import measure, feature
from skimage.segmentation import clear_border
from skimage import data
from scipy import ndimage as ndi
from mpl_toolkits.mplot3d.art3d import Poly3DCollection
# import pydicom as dicom
import scipy.misc

## preprocess images

def get_segmented_lungs(im):
    '''
    This funtion segments the lungs from the given 2D slice.
    '''
    # Convert into a binary image.
    binary = im < -600
    
    # Remove the blobs connected to the border of the image
    cleared = clear_border(binary)

    # Label the image
    label_image = label(cleared)

    # Keep the labels with 2 largest areas
    areas = [r.area for r in regionprops(label_image)]
    areas.sort()
    if len(areas) > 2:
        for region in regionprops(label_image):
            if region.area < areas[-2]:
                for coordinates in region.coords:                
                       label_image[coordinates[0], coordinates[1]] = 0
    binary = label_image > 0

    # Closure operation with disk of radius 12
    selem = disk(2)
    binary = binary_erosion(binary, selem)
    
    selem = disk(10)
    binary = binary_closing(binary, selem)
    
    # Fill in the small holes inside the lungs
    edges = roberts(binary)
    binary = ndi.binary_fill_holes(edges)

    # Superimpose the mask on the input image
    # if use pydicom im[get_high_vals] shoud be 0
    get_high_vals = binary == 0
    im[get_high_vals] = -1025
    
    return im

def num_pixels_of_lung(image_array):
    segmented_ct_scan = get_segmented_lungs(image_array)
    level = -600
    window = 1200
    max = level + window/2
    min = level - window/2
    segmented_ct_scan[segmented_ct_scan < min] = min
    segmented_ct_scan[segmented_ct_scan > max] = max
    segmented_ct_scan = segmented_ct_scan.astype("float32")
    maxx = segmented_ct_scan.max()
    minn = segmented_ct_scan.min()
    med = (maxx - minn) / 2
    image_2d_scaled = ((segmented_ct_scan - minn) / (maxx - minn)) * 255
#     plt.imshow(image_2d_scaled, cmap='gray')
    count = np.count_nonzero(image_2d_scaled)
#     print(count,"pixels are bright.")
    return (image_2d_scaled,count)
#make folder


os.mkdir("segment_dataset")
folders = ['chest_normal']
for i in folders:
    os.mkdir("segment_dataset/{}".format(i))
    ## main dataset path
    files = os.listdir(os.path.join('/home/bahar/datasets/ct_scan/our_data_01_28_v2','chest_normal/chest_normal_dicom'))
    for j in files:
        os.mkdir("segment_dataset/{}/{}".format(i,j))


folders = ['covid']
for i in folders:
    os.mkdir("segment_dataset/{}".format(i))
    ## main dataset path
    files = os.listdir(os.path.join('/home/bahar/datasets/ct_scan/our_data_01_28_v2','chest_pathology/chest_covid_dicom'))
    for j in files:
        os.mkdir("segment_dataset/{}/{}".format(i,j))
		
		
folders = os.listdir("segment_dataset")
print("number of Base folders: {}".format(len(folders)))

for i in folders:
    print("number of folders in {}: {}".format(i,len(os.listdir(os.path.join("segment_dataset",i)))))

counter = 0
normal_cases = os.listdir(os.path.join("/home/bahar/datasets/ct_scan/our_data_01_28_v2", 'chest_normal/chest_normal_dicom'))
for case in normal_cases:
    files = os.listdir(os.path.join('/home/bahar/datasets/ct_scan/our_data_01_28_v2', 'chest_normal/chest_normal_dicom',case))
    print(case)
    for pic in files:
        if("dcm" in pic):
            src = os.path.join('/home/bahar/datasets/ct_scan/our_data_01_28_v2', 'chest_normal/chest_normal_dicom',case,pic)
            dst = os.path.join('segment_dataset','chest_normal',case,pic.replace('dcm','png') )
            ds = dicom.dcmread(src,force=True)
            if 'Image Storage' not in ds.SOPClassUID.name:
                print(src)
                counter += 1
                continue
            
            image_2d, image_header = load(src)
            image_2d = image_2d.reshape((512,512))
            image_2d,num = num_pixels_of_lung(image_2d)
            if(num > 20000):
                cv2.imwrite(dst, image_2d)
			
print("{} images have problem.".format(counter))




counter = 0
covid_cases = os.listdir(os.path.join("/home/bahar/datasets/ct_scan/our_data_01_28_v2", 'chest_pathology/chest_covid_dicom'))
for case in covid_cases:
    files = os.listdir(os.path.join('/home/bahar/datasets/ct_scan/our_data_01_28_v2', 'chest_pathology/chest_covid_dicom',case))
    for pic in files:
        if("dcm" in pic):
            src = os.path.join('/home/bahar/datasets/ct_scan/our_data_01_28_v2', 'chest_pathology/chest_covid_dicom',case,pic)
            dst = os.path.join('segment_dataset','covid',case,pic.replace('dcm','png') )
            ds = dicom.dcmread(src,force=True)
            if 'Image Storage' not in ds.SOPClassUID.name:
                print(src)
                counter += 1
                continue
            image_2d, image_header = load(src)
            image_2d = image_2d.reshape((512,512))
            image_2d,num = num_pixels_of_lung(image_2d)
                        
            if(num > 20000):
                cv2.imwrite(dst, image_2d)
print("{} images have problem.".format(counter))


with tf.device('/device:GPU:0'):
    base_model = tf.keras.applications.DenseNet201(weights = 'imagenet', include_top = False,input_shape=(224,224,3))
    x = base_model.output
    x = Flatten()(x)
    x = Dropout(0.5)(x)
    x = Dense(256, activation='relu')(x)
    x = Dropout(0.5)(x)
    predictions = Dense(1, activation = 'sigmoid')(x)
    model = Model(base_model.input,predictions)

model.compile(loss='binary_crossentropy',
                optimizer=optimizers.Adam(lr=1e-4),
                metrics=['acc'])

model.load_weights(model_path)


import collections
from tensorflow.keras.preprocessing import image

normal_classes = []

case_folders = os.listdir(os.path.join("segment_dataset","chest_normal"))
for i in case_folders:
    folder_path = os.path.join('segment_dataset','chest_normal',i)
    images = []
    for img in os.listdir(folder_path):
        img = os.path.join(folder_path, img)

        img = image.load_img(img, target_size=(224, 224))
        img = image.img_to_array(img)
        img = img/255.0
        images.append(img)
    pred = model.predict(np.array(images))
    classes = []
    for j in pred:
        if j > 0.5:
            classes.append(1)
        else:
            classes.append(0)
    counts = collections.Counter(classes)
    normal_classes.append(counts)
    print("\n_______________________________\n\n", "for person: {} model result is:".format(i))
    print(counts)
    print("\n_______________________________\n")

with open('segment_clinical_normal_classes.json', 'w') as f:
    json.dump(normal_classes, f)


covid_classes = []

case_folders = os.listdir(os.path.join("segment_dataset","covid"))
for i in case_folders:
    folder_path = os.path.join('segment_dataset','covid',i)
    images = []
    for img in os.listdir(folder_path):
        img = os.path.join(folder_path, img)

        img = image.load_img(img, target_size=(224, 224))
        img = image.img_to_array(img)
        img = img/255.0
        images.append(img)
    pred = model.predict(np.array(images))
    classes = []
    for j in pred:
        if j > 0.5:
            classes.append(1)
        else:
            classes.append(0)
    counts = collections.Counter(classes)
    covid_classes.append(counts)
    print("\n_______________________________\n\n", "for person: {} model result is:".format(i))
    print(counts)
    print("\n_______________________________\n")

with open('segment_clinical_covid_classes.json', 'w') as f:
    json.dump(covid_classes, f)



#acc = []
#for th in [21,28,34,35,36]:
#    pos = 0
#    neg = 0
#    for j in range(len(normal_classes)):
#        if(normal_classes[j]['0'] > th):
#            pos += 1
#        else:
#            neg += 1
#    for j in range(len(covid_classes)):
#        if ('0' in covid_classes[j].keys()):
#            if(covid_classes[j]['0'] > th):
#                neg += 1
#            else:
#                pos += 1
#        else:
#            pos += 1
#    acc_temp = pos/(len(covid_classes)+len(normal_classes))
#    print("for threshold {} accuracy is equal to {}".format(th , acc_temp))
#    acc.append({th: acc_temp})

#with open('accuracy.json') as data_file:
#    accuracy = json.load(data_file)

